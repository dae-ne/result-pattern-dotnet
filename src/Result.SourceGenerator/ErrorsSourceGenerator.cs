using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Result.SourceGenerator
{
    [Generator]
    public sealed class ErrorsSourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var errors = context.Compilation.SyntaxTrees
                .SelectMany(tree => tree.GetRoot().DescendantNodes())
                .OfType<ClassDeclarationSyntax>()
                .Where(classDeclaration => classDeclaration.BaseList?.Types
                    .Any(baseType => baseType.Type.ToString() == "ErrorBase") == true)
                .ToList();

            if (errors.Count == 0)
            {
                return;
            }

            var source = $@"// <auto-generated/>
using System;

namespace DaeNe.Result
{{
  public partial class Errors
  {{
{string.Join("\n", errors.Select(error =>
    $"  public static {error.Identifier} {error.Identifier} => new {error.Identifier}();"))}
  }}
}}";
            context.AddSource("Errors.g.cs", source);
        }
    }
}
